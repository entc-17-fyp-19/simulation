// Generated by gencpp from file custom_msg/ctrl_base.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_CTRL_BASE_H
#define CUSTOM_MSG_MESSAGE_CTRL_BASE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt8.h>
#include <std_msgs/Float32.h>

namespace custom_msg
{
template <class ContainerAllocator>
struct ctrl_base_
{
  typedef ctrl_base_<ContainerAllocator> Type;

  ctrl_base_()
    : ctrl_base()
    , angle()  {
    }
  ctrl_base_(const ContainerAllocator& _alloc)
    : ctrl_base(_alloc)
    , angle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _ctrl_base_type;
  _ctrl_base_type ctrl_base;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::custom_msg::ctrl_base_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::ctrl_base_<ContainerAllocator> const> ConstPtr;

}; // struct ctrl_base_

typedef ::custom_msg::ctrl_base_<std::allocator<void> > ctrl_base;

typedef boost::shared_ptr< ::custom_msg::ctrl_base > ctrl_basePtr;
typedef boost::shared_ptr< ::custom_msg::ctrl_base const> ctrl_baseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::ctrl_base_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::ctrl_base_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::ctrl_base_<ContainerAllocator1> & lhs, const ::custom_msg::ctrl_base_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_base == rhs.ctrl_base &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::ctrl_base_<ContainerAllocator1> & lhs, const ::custom_msg::ctrl_base_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::ctrl_base_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::ctrl_base_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::ctrl_base_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::ctrl_base_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::ctrl_base_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::ctrl_base_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::ctrl_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4eeae671ad76ddd32fa58c4dacb24993";
  }

  static const char* value(const ::custom_msg::ctrl_base_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4eeae671ad76ddd3ULL;
  static const uint64_t static_value2 = 0x2fa58c4dacb24993ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::ctrl_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/ctrl_base";
  }

  static const char* value(const ::custom_msg::ctrl_base_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::ctrl_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt8 ctrl_base\n"
"std_msgs/Float32 angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::custom_msg::ctrl_base_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::ctrl_base_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_base);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ctrl_base_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::ctrl_base_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::ctrl_base_<ContainerAllocator>& v)
  {
    s << indent << "ctrl_base: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.ctrl_base);
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_CTRL_BASE_H
